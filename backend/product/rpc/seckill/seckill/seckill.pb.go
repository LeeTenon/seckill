// Code generated by protoc-gen-go. DO NOT EDIT.
// source: seckill.proto

package seckill

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Pid                  uint32   `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Num                  uint32   `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_1202afb06d2a3a7a, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetPid() uint32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *Request) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type Response struct {
	Oid                  string   `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	PName                string   `protobuf:"bytes,2,opt,name=pName,proto3" json:"pName,omitempty"`
	Price                float32  `protobuf:"fixed32,3,opt,name=price,proto3" json:"price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_1202afb06d2a3a7a, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetOid() string {
	if m != nil {
		return m.Oid
	}
	return ""
}

func (m *Response) GetPName() string {
	if m != nil {
		return m.PName
	}
	return ""
}

func (m *Response) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func init() {
	proto.RegisterType((*Request)(nil), "seckill.Request")
	proto.RegisterType((*Response)(nil), "seckill.Response")
}

func init() { proto.RegisterFile("seckill.proto", fileDescriptor_1202afb06d2a3a7a) }

var fileDescriptor_1202afb06d2a3a7a = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x4d, 0xce,
	0xce, 0xcc, 0xc9, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x74, 0xb9,
	0xd8, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x04, 0xb8, 0x98, 0x0b, 0x32, 0x53, 0x24,
	0x18, 0x15, 0x18, 0x35, 0x78, 0x83, 0x40, 0x4c, 0x90, 0x48, 0x5e, 0x69, 0xae, 0x04, 0x13, 0x44,
	0x24, 0xaf, 0x34, 0x57, 0xc9, 0x83, 0x8b, 0x23, 0x28, 0xb5, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x15,
	0x24, 0x9b, 0x0f, 0x55, 0xcf, 0x19, 0x04, 0x62, 0x0a, 0x89, 0x70, 0xb1, 0x16, 0xf8, 0x25, 0xe6,
	0xa6, 0x82, 0x75, 0x70, 0x06, 0x41, 0x38, 0x60, 0xd1, 0xa2, 0xcc, 0xe4, 0x54, 0x09, 0x66, 0x05,
	0x46, 0x0d, 0xa6, 0x20, 0x08, 0xc7, 0xc8, 0x8e, 0x8b, 0x3d, 0x38, 0x35, 0xd9, 0x3b, 0x33, 0x27,
	0x47, 0xc8, 0x98, 0x8b, 0x07, 0xca, 0xf4, 0x2f, 0x4a, 0x49, 0x2d, 0x12, 0x12, 0xd0, 0x83, 0x39,
	0x16, 0xea, 0x34, 0x29, 0x41, 0x24, 0x11, 0x88, 0xed, 0x49, 0x6c, 0x60, 0x8f, 0x18, 0x03, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x06, 0x03, 0x7e, 0x07, 0xd9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SecKillClient is the client API for SecKill service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SecKillClient interface {
	SecKillOrder(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type secKillClient struct {
	cc grpc.ClientConnInterface
}

func NewSecKillClient(cc grpc.ClientConnInterface) SecKillClient {
	return &secKillClient{cc}
}

func (c *secKillClient) SecKillOrder(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/seckill.SecKill/SecKillOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecKillServer is the server API for SecKill service.
type SecKillServer interface {
	SecKillOrder(context.Context, *Request) (*Response, error)
}

// UnimplementedSecKillServer can be embedded to have forward compatible implementations.
type UnimplementedSecKillServer struct {
}

func (*UnimplementedSecKillServer) SecKillOrder(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecKillOrder not implemented")
}

func RegisterSecKillServer(s *grpc.Server, srv SecKillServer) {
	s.RegisterService(&_SecKill_serviceDesc, srv)
}

func _SecKill_SecKillOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).SecKillOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seckill.SecKill/SecKillOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).SecKillOrder(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _SecKill_serviceDesc = grpc.ServiceDesc{
	ServiceName: "seckill.SecKill",
	HandlerType: (*SecKillServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SecKillOrder",
			Handler:    _SecKill_SecKillOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seckill.proto",
}
